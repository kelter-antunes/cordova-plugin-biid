#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
//Simulator Header
#else
//Device Header
// Generated by Apple Swift version 5.4.2 effective-4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef BIIDSECPROVSDK_SWIFT_H
#define BIIDSECPROVSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="biidSecProvSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM_NAMED(NSInteger, AsymmetricCryptoException, "ObjC_AsymmetricCryptoException", closed) {
  AsymmetricCryptoExceptionUnknownError = 300,
  AsymmetricCryptoExceptionDuplicateFoundWhileTryingToCreateKey = 301,
  AsymmetricCryptoExceptionKeyNotFound = 302,
  AsymmetricCryptoExceptionAuthFailed = 303,
  AsymmetricCryptoExceptionUnableToAddPublicKeyToKeychain = 304,
  AsymmetricCryptoExceptionWrongInputDataFormat = 305,
  AsymmetricCryptoExceptionUnableToEncrypt = 306,
  AsymmetricCryptoExceptionUnableToDecrypt = 307,
  AsymmetricCryptoExceptionUnableToSignData = 308,
  AsymmetricCryptoExceptionUnableToVerifySignedData = 309,
  AsymmetricCryptoExceptionUnableToPerformHashOfData = 310,
  AsymmetricCryptoExceptionUnableToGenerateAccessControlWithGivenSecurity = 311,
  AsymmetricCryptoExceptionOutOfMemory = 312,
};

@class NSString;
@class NSNumber;
@class NSCoder;

SWIFT_CLASS_NAMED("ObjC_BiidError")
@interface BIIDSPBiidError : NSError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bundleID;)
+ (NSString * _Nonnull)bundleID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable traceId;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end

@class BIIDSPValidationError;
@class BIIDSPClientError;
@class BIIDSPInvalidCredentialsError;
@class BIIDSPUserBlockedError;
@class BIIDSPPhoneNumberVerificationLimitError;
@class BIIDSPVerificationCodeExpiredError;
@class BIIDSPVerificationCodeBlockedError;
@class BIIDSPSecurityConfig;
@class BIIDSPInvalidBiometricsError;
@class BIIDSPUserCheckResponse;

SWIFT_PROTOCOL_NAMED("ObjC_Client")
@protocol SecurityClient
- (BOOL)initializeWithInstallationID:(NSString * _Nonnull)installationID error:(NSError * _Nullable * _Nullable)error;
/// Sets the deviceâ€™s installation id
/// \param installationID Installation ID to set
///
- (void)setInstallationIDWithInstallationID:(NSString * _Nonnull)installationID;
/// Returns the deviceâ€™s installationID
///
/// returns:
/// Installation ID
- (NSString * _Nullable)getInstallationID SWIFT_WARN_UNUSED_RESULT;
- (void)registerWithUsername:(NSString * _Nonnull)username passcode:(NSString * _Nonnull)passcode phoneNumber:(NSString * _Nonnull)phoneNumber onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onValidationError:(void (^ _Nonnull)(BIIDSPValidationError * _Nonnull))onValidationError onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)loginWithUsername:(NSString * _Nonnull)username passcode:(NSString * _Nonnull)passcode onSuccess:(void (^ _Nonnull)(BOOL))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidCredentials:(void (^ _Nonnull)(BIIDSPInvalidCredentialsError * _Nonnull))onInvalidCredentials onUserBlocked:(void (^ _Nonnull)(BIIDSPUserBlockedError * _Nonnull))onUserBlocked onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)requestPhoneNumberVerificationForPhoneNumber:(NSString * _Nonnull)phoneNumber onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onValidationError:(void (^ _Nonnull)(BIIDSPValidationError * _Nonnull))onValidationError onPhoneNumberverificationLimitError:(void (^ _Nonnull)(BIIDSPPhoneNumberVerificationLimitError * _Nonnull))onPhoneNumberVerificationLimitError onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)verifyWithPhoneNumber:(NSString * _Nonnull)phoneNumber withVerificationCode:(NSInteger)verificationCode onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onValidationError:(void (^ _Nonnull)(BIIDSPValidationError * _Nonnull))onValidationError onVerificationCodeExpired:(void (^ _Nonnull)(BIIDSPVerificationCodeExpiredError * _Nonnull))onVerificationCodeExpired onInvalidCredentials:(void (^ _Nonnull)(BIIDSPInvalidCredentialsError * _Nonnull))onInvalidCredentials onVerificationCodeBlocked:(void (^ _Nonnull)(BIIDSPVerificationCodeBlockedError * _Nonnull))onVerificationCodeBlocked onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)requestConfigOnSuccess:(void (^ _Nonnull)(BIIDSPSecurityConfig * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)loginWithBiometricsWithUsername:(NSString * _Nonnull)username OnSucces:(void (^ _Nonnull)(void))onSuccess OnUserCancelled:(void (^ _Nonnull)(void))onUserCancelled onNoConnection:(void (^ _Nonnull)(void))onNoConnection onBiometricsError:(void (^ _Nonnull)(BIIDSPInvalidBiometricsError * _Nonnull))onBiometricsError onInvalidCredentials:(void (^ _Nonnull)(BIIDSPInvalidCredentialsError * _Nonnull))onInvalidCredentials onUserBlocked:(void (^ _Nonnull)(BIIDSPUserBlockedError * _Nonnull))onUserBlocked onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)logoutOnSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)updatePasswordWithNewPassword:(NSString * _Nonnull)password onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onValidationError:(void (^ _Nonnull)(BIIDSPValidationError * _Nonnull))onValidationError onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)enableBiometricAuthenticationWithUsername:(NSString * _Nonnull)username AndPassword:(NSString * _Nonnull)password OnSuccess:(void (^ _Nonnull)(void))onSuccess onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)disableBiometricAuthenticationWithUsername:(NSString * _Nonnull)username OnSuccess:(void (^ _Nonnull)(void))onSuccess onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (BOOL)isBiometricAuthenticationEnabledForUsername:(NSString * _Nonnull)username SWIFT_WARN_UNUSED_RESULT;
- (void)cancelBiometricAuthenticationOnSuccess:(void (^ _Nonnull)(void))onSuccess onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)setBiometricAuthenticationReasonWithReason:(NSString * _Nonnull)reason;
- (NSString * _Nullable)getAccessToken SWIFT_WARN_UNUSED_RESULT;
- (void)checkUserWithUsername:(NSString * _Nonnull)username andPhoneNumber:(NSString * _Nonnull)phoneNumber andEmail:(NSString * _Nonnull)email onSuccess:(void (^ _Nonnull)(BIIDSPUserCheckResponse * _Nullable))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
@end


SWIFT_CLASS_NAMED("ObjC_ClientError")
@interface BIIDSPClientError : BIIDSPBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clientErrorDomain;)
+ (NSString * _Nonnull)clientErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull asymmetricCryptoExceptionErrorDomain;)
+ (NSString * _Nonnull)asymmetricCryptoExceptionErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull nativeBiometricExceptionErrorDomain;)
+ (NSString * _Nonnull)nativeBiometricExceptionErrorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ClientException, "ObjC_ClientException", closed) {
  ClientExceptionClientNotSupported = 100,
  ClientExceptionFailedToLogin = 101,
  ClientExceptionFailedToLogout = 102,
  ClientExceptionFailedToEnableNativeBiometricsAuthentication = 103,
  ClientExceptionFailedToDisableNativeBiometricsAuthentication = 104,
  ClientExceptionFailedToRegisterUser = 105,
  ClientExceptionFailedToRequestConfig = 106,
  ClientExceptionFailedToRequestVerificationCode = 107,
  ClientExceptionFailedToUpdatePasscode = 108,
  ClientExceptionGeneralError = 109,
  ClientExceptionInvalidEndpoint = 110,
  ClientExceptionInvalidConfigResponse = 111,
  ClientExceptionInvalidLoginResponse = 112,
  ClientExceptionInvalidRegisterResponse = 113,
  ClientExceptionInvalidUpdatePasscodeResponse = 114,
  ClientExceptionMissingOrInvalidParameter = 115,
  ClientExceptionMustBeCalledOnTheMainThread = 116,
  ClientExceptionNativeBiometricAuthenticationNotAvailable = 117,
  ClientExceptionPasscodeCouldNotBeEncrypted = 118,
  ClientExceptionSdkNotInitialized = 119,
  ClientExceptionUnknownError = 120,
  ClientExceptionUserNotAuthenticated = 121,
  ClientExceptionVerificationCodeNotRequested = 122,
  ClientExceptionDeviceNotRegisteredForUser = 123,
  ClientExceptionNoActiveBiometricAuthentication = 124,
};


SWIFT_CLASS_NAMED("ObjC_ClientImplementation")
@interface BIIDSPClientImplementation : NSObject <SecurityClient>
- (nonnull instancetype)init;
- (BOOL)initializeWithInstallationID:(NSString * _Nonnull)installationID error:(NSError * _Nullable * _Nullable)error;
- (void)setInstallationIDWithInstallationID:(NSString * _Nonnull)installationID;
- (NSString * _Nullable)getInstallationID SWIFT_WARN_UNUSED_RESULT;
- (void)registerWithUsername:(NSString * _Nonnull)username passcode:(NSString * _Nonnull)passcode phoneNumber:(NSString * _Nonnull)phoneNumber onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onValidationError:(void (^ _Nonnull)(BIIDSPValidationError * _Nonnull))onValidationError onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)loginWithUsername:(NSString * _Nonnull)username passcode:(NSString * _Nonnull)passcode onSuccess:(void (^ _Nonnull)(BOOL))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidCredentials:(void (^ _Nonnull)(BIIDSPInvalidCredentialsError * _Nonnull))onInvalidCredentials onUserBlocked:(void (^ _Nonnull)(BIIDSPUserBlockedError * _Nonnull))onUserBlocked onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (NSString * _Nullable)getAccessToken SWIFT_WARN_UNUSED_RESULT;
- (void)requestPhoneNumberVerificationForPhoneNumber:(NSString * _Nonnull)phoneNumber onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onValidationError:(void (^ _Nonnull)(BIIDSPValidationError * _Nonnull))onValidationError onPhoneNumberverificationLimitError:(void (^ _Nonnull)(BIIDSPPhoneNumberVerificationLimitError * _Nonnull))onPhoneNumberVerificationLimitError onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)verifyWithPhoneNumber:(NSString * _Nonnull)phoneNumber withVerificationCode:(NSInteger)verificationCode onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onValidationError:(void (^ _Nonnull)(BIIDSPValidationError * _Nonnull))onValidationError onVerificationCodeExpired:(void (^ _Nonnull)(BIIDSPVerificationCodeExpiredError * _Nonnull))onVerificationCodeExpired onInvalidCredentials:(void (^ _Nonnull)(BIIDSPInvalidCredentialsError * _Nonnull))onInvalidCredentials onVerificationCodeBlocked:(void (^ _Nonnull)(BIIDSPVerificationCodeBlockedError * _Nonnull))onVerificationCodeBlocked onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)requestConfigOnSuccess:(void (^ _Nonnull)(BIIDSPSecurityConfig * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)loginWithBiometricsWithUsername:(NSString * _Nonnull)username OnSucces:(void (^ _Nonnull)(void))onSuccess OnUserCancelled:(void (^ _Nonnull)(void))onUserCancelled onNoConnection:(void (^ _Nonnull)(void))onNoConnection onBiometricsError:(void (^ _Nonnull)(BIIDSPInvalidBiometricsError * _Nonnull))onBiometricsError onInvalidCredentials:(void (^ _Nonnull)(BIIDSPInvalidCredentialsError * _Nonnull))onInvalidCredentials onUserBlocked:(void (^ _Nonnull)(BIIDSPUserBlockedError * _Nonnull))onUserBlocked onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)logoutOnSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)updatePasswordWithNewPassword:(NSString * _Nonnull)password onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onValidationError:(void (^ _Nonnull)(BIIDSPValidationError * _Nonnull))onValidationError onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)enableBiometricAuthenticationWithUsername:(NSString * _Nonnull)username AndPassword:(NSString * _Nonnull)password OnSuccess:(void (^ _Nonnull)(void))onSuccess onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)disableBiometricAuthenticationWithUsername:(NSString * _Nonnull)username OnSuccess:(void (^ _Nonnull)(void))onSuccess onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (BOOL)isBiometricAuthenticationEnabledForUsername:(NSString * _Nonnull)username SWIFT_WARN_UNUSED_RESULT;
- (void)cancelBiometricAuthenticationOnSuccess:(void (^ _Nonnull)(void))onSuccess onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
- (void)setBiometricAuthenticationReasonWithReason:(NSString * _Nonnull)reason;
- (void)checkUserWithUsername:(NSString * _Nonnull)username andPhoneNumber:(NSString * _Nonnull)phoneNumber andEmail:(NSString * _Nonnull)email onSuccess:(void (^ _Nonnull)(BIIDSPUserCheckResponse * _Nullable))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onClientError:(void (^ _Nonnull)(BIIDSPClientError * _Nonnull))onClientError;
@end


SWIFT_CLASS_NAMED("ObjC_InvalidBiometricsError")
@interface BIIDSPInvalidBiometricsError : BIIDSPBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("ObjC_InvalidCredentialsError")
@interface BIIDSPInvalidCredentialsError : BIIDSPBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger attemptsLeft;
@property (nonatomic) NSInteger failedAttempts;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("ObjC_InvalidHashError")
@interface BIIDSPInvalidHashError : BIIDSPBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NativeBiometricException, "ObjC_NativeBiometricException", closed) {
  NativeBiometricExceptionBiometryNotAvailable = 200,
  NativeBiometricExceptionBiometryLockout = 201,
  NativeBiometricExceptionBiometryNotEnrolled = 202,
  NativeBiometricExceptionTouchIDLockout = 203,
  NativeBiometricExceptionTouchIDNotAvailable = 204,
  NativeBiometricExceptionTouchIDNotEnrolled = 205,
  NativeBiometricExceptionUnknown = 206,
};

typedef SWIFT_ENUM_NAMED(NSInteger, PasswordType, "ObjC_PasswordType", closed) {
  PasswordTypeAlphanumeric = 0,
  PasswordTypeNumeric = 1,
};


SWIFT_CLASS_NAMED("ObjC_PhoneNumberVerificationLimitError")
@interface BIIDSPPhoneNumberVerificationLimitError : BIIDSPBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("ObjC_SecurityConfig")
@interface BIIDSPSecurityConfig : NSObject
/// Wether user registration on the sdk is allowed or not
@property (nonatomic, readonly) BOOL userRegistrationAllowed;
/// Username Minimum Length
@property (nonatomic, readonly) NSInteger usernameMinLength;
/// Username Maximum Length
@property (nonatomic, readonly) NSInteger usernameMaxLength;
/// Type of characters accepted in the password
@property (nonatomic, readonly) enum PasswordType passwordType;
/// Passcode Minimum Length
@property (nonatomic, readonly) NSInteger passwordMinLength;
/// Passcode Maximum Length
@property (nonatomic, readonly) NSInteger passwordMaxLength;
/// Phone verification enabled in the security sdk
@property (nonatomic, readonly) BOOL phoneVerificationEnabled;
/// Password validity time in minutes
@property (nonatomic, readonly) NSInteger phoneVerificationCodeValidity;
/// Maximum amount of time a verification code can be requested in a day
@property (nonatomic, readonly) NSInteger phoneVerificationMaxDailyRequests;
/// Maximum amount of times verification can be unsuccesfully attempted before being blocked
@property (nonatomic, readonly) NSInteger phoneVerificationMaxAttempts;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDSPSecurityConfig (SWIFT_EXTENSION(biidSecProvSDK))
/// :nodoc:
+ (BOOL)areEqual:(BIIDSPSecurityConfig * _Nonnull)lhs :(BIIDSPSecurityConfig * _Nonnull)rhs SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ObjC_SecuritySDK")
@interface SecuritySDK : NSObject
+ (id <SecurityClient> _Nonnull)getClient SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ObjC_UserBlockedError")
@interface BIIDSPUserBlockedError : BIIDSPBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("ObjC_UserCheckResponse")
@interface BIIDSPUserCheckResponse : NSObject
/// Wether a user with the given username exists or not
@property (nonatomic, readonly) BOOL existsUsername;
/// Wether a user with the given phone number exists or not
@property (nonatomic, readonly) BOOL existsPhone;
/// Wether a user with tthe given email exists or not
@property (nonatomic, readonly) BOOL existsEmail;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDSPUserCheckResponse (SWIFT_EXTENSION(biidSecProvSDK))
/// :nodoc:
+ (BOOL)areEqual:(BIIDSPUserCheckResponse * _Nonnull)lhs :(BIIDSPUserCheckResponse * _Nonnull)rhs SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ObjC_ValidationError")
@interface BIIDSPValidationError : BIIDSPBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("ObjC_VerificationCodeBlockedError")
@interface BIIDSPVerificationCodeBlockedError : BIIDSPBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("ObjC_VerificationCodeExpiredError")
@interface BIIDSPVerificationCodeExpiredError : BIIDSPBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
#endif
