#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
//Simulator Header
#else
//Device Header
// Generated by Apple Swift version 5.4.2 effective-4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef BIIDCORESDK_SWIFT_H
#define BIIDCORESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="biidCoreSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

SWIFT_CLASS("_TtC11biidCoreSDK17AnyLanguageBundle")
@interface AnyLanguageBundle : NSBundle
- (NSString * _Nonnull)localizedStringForKey:(NSString * _Nonnull)key value:(NSString * _Nullable)value table:(NSString * _Nullable)tableName SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithPath:(NSString * _Nonnull)path OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC11biidCoreSDK25CertificateSigningRequest")
@interface CertificateSigningRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// This class exists due to the easy and intuitive way of using public keys generated outside iOS in
/// the Security framework and CommonCrypto tools (yes, I’m being sarcastic here).
/// CryptoCertificateImportManager is in charge of importing a certificate and obtaining a valid key
/// reference to use in any of SecKey operations (SecKeyEncrypt, SecKeyRawVerify…).
/// As far as I know, any other way of importing and using public keys from the outside is not
/// advised: https://devforums.apple.com/message/301532#301532
SWIFT_CLASS("_TtC11biidCoreSDK25CryptoExportImportManager")
@interface CryptoExportImportManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCRAccreditationLevel, "ObjC_AccreditationLevel", closed) {
  BIIDCRAccreditationLevelUnaccredited = 0,
  BIIDCRAccreditationLevelL1 = 1,
  BIIDCRAccreditationLevelL2 = 2,
  BIIDCRAccreditationLevelL3 = 3,
  BIIDCRAccreditationLevelL4 = 4,
};

@class BIIDCRLocation;

SWIFT_CLASS_NAMED("ObjC_Address")
@interface BIIDCRAddress : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable fullAddress;
@property (nonatomic, readonly, copy) NSString * _Nullable street;
@property (nonatomic, readonly, copy) NSString * _Nullable street2;
@property (nonatomic, readonly, copy) NSString * _Nullable street3;
@property (nonatomic, readonly, copy) NSString * _Nullable postcode;
@property (nonatomic, readonly, copy) NSString * _Nullable city;
@property (nonatomic, readonly, copy) NSString * _Nullable region;
@property (nonatomic, readonly, copy) NSString * _Nullable countryCode;
@property (nonatomic, readonly, copy) NSString * _Nullable country;
@property (nonatomic, readonly, strong) BIIDCRLocation * _Nullable location;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSNumber;

@interface BIIDCRAddress (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCRAsymmetricCryptoException, "ObjC_AsymmetricCryptoException", closed) {
  BIIDCRAsymmetricCryptoExceptionUnknownError = 300,
  BIIDCRAsymmetricCryptoExceptionDuplicateFoundWhileTryingToCreateKey = 301,
  BIIDCRAsymmetricCryptoExceptionKeyNotFound = 302,
  BIIDCRAsymmetricCryptoExceptionAuthFailed = 303,
  BIIDCRAsymmetricCryptoExceptionUnableToAddPublicKeyToKeychain = 304,
  BIIDCRAsymmetricCryptoExceptionWrongInputDataFormat = 305,
  BIIDCRAsymmetricCryptoExceptionUnableToEncrypt = 306,
  BIIDCRAsymmetricCryptoExceptionUnableToDecrypt = 307,
  BIIDCRAsymmetricCryptoExceptionUnableToSignData = 308,
  BIIDCRAsymmetricCryptoExceptionUnableToVerifySignedData = 309,
  BIIDCRAsymmetricCryptoExceptionUnableToPerformHashOfData = 310,
  BIIDCRAsymmetricCryptoExceptionUnableToGenerateAccessControlWithGivenSecurity = 311,
  BIIDCRAsymmetricCryptoExceptionOutOfMemory = 312,
};

enum BIIDCRTransactionStatus : NSInteger;
enum BIIDCRTransactionType : NSInteger;
enum BIIDCRTransactionSubType : NSInteger;
@class BIIDCRSignatory;
@class BIIDCRTransactionInfo;

SWIFT_CLASS_NAMED("ObjC_Transaction")
@interface BIIDCRTransaction : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable id;
@property (nonatomic, readonly, copy) NSString * _Nullable creationDate;
@property (nonatomic, readonly, copy) NSString * _Nullable expirationDate;
@property (nonatomic, readonly, copy) NSString * _Nullable executionDate;
@property (nonatomic, readonly) enum BIIDCRTransactionStatus status;
@property (nonatomic, readonly) enum BIIDCRTransactionType type;
@property (nonatomic, readonly) enum BIIDCRTransactionSubType subType;
@property (nonatomic, readonly, strong) BIIDCRSignatory * _Nullable signatory;
@property (nonatomic, readonly, strong) BIIDCRTransactionInfo * _Nullable info;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ObjC_AuthenticationTransaction")
@interface BIIDCRAuthenticationTransaction : BIIDCRTransaction
@property (nonatomic, readonly, copy) NSString * _Nullable hashToSign;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


@interface BIIDCRAuthenticationTransaction (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class NSCoder;

SWIFT_CLASS_NAMED("ObjC_BiidError")
@interface BIIDCRBiidError : NSError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bundleID;)
+ (NSString * _Nonnull)bundleID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable traceId;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end

enum BIIDCRNotificationType : NSInteger;

SWIFT_CLASS_NAMED("ObjC_BiidNotification")
@interface BIIDCRNotification : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull notificationTitle;
@property (nonatomic, readonly, copy) NSString * _Nonnull notificationDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull username;
@property (nonatomic, readonly, copy) NSString * _Nonnull entityURL;
@property (nonatomic, readonly, copy) NSString * _Nullable transactionId;
@property (nonatomic, readonly) enum BIIDCRNotificationType type;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCRNotification (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCRCertificateException, "ObjC_CertificateException", closed) {
  BIIDCRCertificateExceptionCertificateNotFound = 400,
  BIIDCRCertificateExceptionNoCertificateReturned = 401,
  BIIDCRCertificateExceptionUnableToDeleteFromKeychain = 402,
  BIIDCRCertificateExceptionUnableToLoadFromKeychain = 403,
  BIIDCRCertificateExceptionUnableToSaveToKeychain = 404,
};

@class BIIDCRContactDetails;
enum BIIDCROpeningHoursStatus : NSInteger;

SWIFT_CLASS_NAMED("ObjC_Checkpoint")
@interface BIIDCRCheckpoint : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable id;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable notes;
@property (nonatomic, readonly, strong) BIIDCRContactDetails * _Nullable contactDetails;
@property (nonatomic, readonly, strong) BIIDCRAddress * _Nullable address;
@property (nonatomic, readonly) double distance;
@property (nonatomic, readonly) enum BIIDCROpeningHoursStatus openingHoursStatus;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCRCheckpoint (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class BIIDCROpeningHoursSchedule;
@class BIIDCRHoliday;

SWIFT_CLASS_NAMED("ObjC_CheckpointDetails")
@interface BIIDCRCheckpointDetails : BIIDCRCheckpoint
@property (nonatomic, readonly, copy) NSArray<BIIDCROpeningHoursSchedule *> * _Nullable openingHoursSchedules;
@property (nonatomic, readonly, copy) NSArray<BIIDCRHoliday *> * _Nullable holidays;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


@interface BIIDCRCheckpointDetails (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCRCheckpointsSortOrder, "ObjC_CheckpointsSortOrder", closed) {
  BIIDCRCheckpointsSortOrderAscending = 0,
  BIIDCRCheckpointsSortOrderDescending = 1,
};

@class BIIDCRInvalidTokenError;
@class BIIDCRClientError;
@class BIIDCREntity;
@class BIIDCRInvalidUserStateError;
@class BIIDCRValidationError;
@class BIIDCREntityDetails;
@class BIIDCRUserLockedError;
@class CLLocation;
@class BIIDCRCountry;
@class BIIDCRDocumentIdType;
@class BIIDCRUser;
@class BIIDCRUserUpdateForbiddenError;
@class BIIDCRUserDevice;
@class BIIDCRVerificationRequestLimitError;
@class BIIDCRVerificationCodeExpiredError;
@class BIIDCRVerificationCodeAttemptsError;
@class BIIDCRCredentialsError;
enum BIIDCRDocumentType : NSInteger;
@class BIIDCRDIACLimitError;
@class BIIDCRTransactionNotPendingError;
@class BIIDCRDocumentsTransaction;
@class BIIDCRDocument;
@class NSURL;
@class BIIDCRMessageTransaction;
@class NSData;
@class BIIDCROnboardingProcess;
@class BIIDCREvidence;

SWIFT_PROTOCOL_NAMED("ObjC_Client")
@protocol Client
/// Returns language code (ISO 639-1) used for localized content (SDK and server side error messages).
///
/// throws:
/// ClientException
- (NSString * _Nullable)getLanguage:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Initializes the biid client. Does nothing if the client is already initialised.
/// The client must be initialised before any other client method is called.
///
/// throws:
/// ClientException
- (BOOL)initialize:(NSError * _Nullable * _Nullable)error;
/// Overrides the device’s default language for localized content (SDK and server side error messages)
/// \param language the language code (ISO 639-1) to use or nil to use the device’s default language
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onClientError Closure called when a client error occurs
///
- (void)setLanguageToLanguage:(NSString * _Nullable)language onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Authenticates a user
/// \param username Username
///
/// \param accessToken A session / access token provided by the App
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onClientError Closure called when a client error occurs
///
- (void)authenticateWithUsername:(NSString * _Nonnull)username accessToken:(NSString * _Nonnull)accessToken entity:(BIIDCREntity * _Nullable)entity onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Re-authenticates the User’s current Entity
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onClientError Closure called when a client error occurs
///
- (void)reauthenticateOnSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Logs the user out
///
/// throws:
/// ClientException
- (BOOL)logout:(NSError * _Nullable * _Nullable)error;
/// Sets the device’s installation id
/// \param installationID Installation ID to set
///
///
/// throws:
/// ClientException
- (BOOL)setInstallationID:(NSString * _Nonnull)installationID error:(NSError * _Nullable * _Nullable)error;
/// Returns the device’s installationID
///
/// throws:
/// ClientException
///
/// returns:
/// Installation ID
- (NSString * _Nullable)getInstallationID:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns the authenticated roles.
///
/// throws:
/// ClientException
///
/// returns:
/// Array of Roles
- (NSArray<NSNumber *> * _Nullable)getRoles:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Checks if an entity with a given url name exists and returns it’s Entity if it does. NB Returns “multipleEntitiesNotSupported” client exception if the app is not configured to support multiple entities
/// \param withURLName the URL name of the entity. For example in an entity with a URL of “the-entity.biid.com”, the URL name is “the-entity”
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onClientError Closure called when a client error occurs
///
- (void)checkEntityExistsWithURLName:(NSString * _Nonnull)withURLName onSuccess:(void (^ _Nonnull)(BIIDCREntity * _Nullable))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Requests an entity by url. NB Returns “multipleEntitiesNotSupported” client exception if the app is not configured to support multiple entities
/// \param withURLName the URL name of the entity. For example in an entity with a URL of “the-entity.biid.com”, the URL name is “the-entity”
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onValidationError Closure called when a parameters fails validation
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestEntityWithURLName:(NSString * _Nonnull)withURLName onSuccess:(void (^ _Nonnull)(BIIDCREntity * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Requests a list of entities linked to the user. NB Returns “multipleEntitiesNotSupported” client exception if the app is not configured to support multiple entities
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestEntitiesForUserOnSuccess:(void (^ _Nonnull)(NSArray<BIIDCREntity *> * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Selects an entity. If the entity was not linked to the device before, it will be after this method is called. NB Returns “multipleEntitiesNotSupported” client exception if the app is not configured to support multiple entities
/// \param entity Entity to Select
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onClientError Closure called when a client error occurs
///
- (void)selectEntity:(BIIDCREntity * _Nonnull)entity onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Selects an entity with an Entity ID. If the entity was not linked to the device before, it will be after this method is called. NB Returns “multipleEntitiesNotSupported” client exception if the app is not configured to support multiple entities
/// \param id Id of Entity to be selected
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onClientError Closure called when a client error occurs
///
- (void)selectEntityWithEntityID:(NSString * _Nonnull)id onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Requests the User’s currently authenticated Entity
///
/// throws:
/// ClientException
///
/// returns:
/// Entity
- (BIIDCREntity * _Nullable)getSelectedEntity:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Identifies if the SDK is configured to support multiple entities as defined in the manifest
///
/// throws:
/// ClientException
///
/// returns:
/// Bool
- (NSNumber * _Nullable)isMultiEntityConfig:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Identifies if the SDK is configured to support a single entity as defined in the manifest
///
/// throws:
/// ClientException
///
/// returns:
/// Bool
- (NSNumber * _Nullable)isSingleEntityConfig:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Request details for the User’s currently authenticated entity
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestEntityDetailsOnSuccess:(void (^ _Nonnull)(BIIDCREntityDetails * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Requests a list of Checkpoints for the current entity
/// \param max Maximum results to return - Optional (defaults to 10)
///
/// \param offset Results offset - Optional (defaults to 0)
///
/// \param location Location as a CLLocation. If specified only checkpoints close to this location are returned and their distance from the location to the checkpoint is computed. - Optional (defaults to showing all checkpoints)
///
/// \param sortOrder Sort ascending or descending - Optional (defaults to ascending)
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestCheckpointsWithMax:(NSInteger)max offset:(NSInteger)offset location:(CLLocation * _Nullable)location sortOrder:(enum BIIDCRCheckpointsSortOrder)sortOrder onSuccess:(void (^ _Nonnull)(NSArray<BIIDCRCheckpoint *> * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Requests a list of Checkpoints (for the current entity) nearest to the specified location
/// \param max Maximum results to return - Optional (defaults to 10)
///
/// \param offset Results offset - Optional (defaults to 0)
///
/// \param location Location as a CLLocation. The distance from this location to the checkpoint is computed and used to order the list from nearest to furthest
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestNearestCheckpointsWithMax:(NSInteger)max offset:(NSInteger)offset location:(CLLocation * _Nonnull)location onSuccess:(void (^ _Nonnull)(NSArray<BIIDCRCheckpoint *> * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Requests checkpoint details for a checkpoint with a particular checkpoint ID
/// \param checkpointID CheckpointID
///
/// \param location User’s location as a CLLocation - Optional (defaults to nil)
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestCheckpointDetailsWithCheckpointID:(NSString * _Nonnull)checkpointID location:(CLLocation * _Nullable)location onSuccess:(void (^ _Nonnull)(BIIDCRCheckpointDetails * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Requests a list of countries
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestCountriesOnSuccess:(void (^ _Nonnull)(NSArray<BIIDCRCountry *> * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Requests a list of document id types
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestDocumentIdTypesOnSuccess:(void (^ _Nonnull)(NSArray<BIIDCRDocumentIdType *> * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Request the details of the current user
/// NOTE: This call always returns the status of the user even if the user is in a locked state.
/// If the User is locked, a basic user object will be returned (without any registration fields).
/// In a very rare case, where the server is not synced with the local certificate state on the device, and
/// an additional request is sent, a user locked error may be returned.
/// In these circumstance, UserLockedErrors should be caught and handled in the normal way.
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestUserOnSuccess:(void (^ _Nonnull)(BIIDCRUser * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Register the user for the user’s currently authenticated entity
/// \param user User to register
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onValidationError Closure called when a parameters fails validation
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)registerUser:(BIIDCRUser * _Nonnull)user onSuccess:(void (^ _Nonnull)(BIIDCRUser * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Update the user for the user’s currently authenticated entity
/// \param user User’s updated details
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onValidationError Closure called when a parameters fails validation
///
/// \param onUserUpdateForbiddenError Closure called when the user cannot be updated. Normally returned because the user is already accredited above Level 1
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)updateUser:(BIIDCRUser * _Nonnull)user onSuccess:(void (^ _Nonnull)(BIIDCRUser * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onUserUpdateForbiddenErrorCallback:(void (^ _Nonnull)(BIIDCRUserUpdateForbiddenError * _Nonnull))onUserUpdateForbiddenError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Update the user for the user’s currently authenticated entity
/// \param phoneNumber updated phone number
///
/// \param diac Digital Identity Access Code the user received by different channel
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onValidationError Closure called when a parameters fails validation
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)updateUserPhoneNumber:(NSString * _Nonnull)phoneNumber withDiac:(NSString * _Nonnull)diac onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Requests a list of the current user’s devices and their respective status
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestUserDevicesOnSuccess:(void (^ _Nonnull)(NSArray<BIIDCRUserDevice *> * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Request verification of the current device
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onVerificationRequestLimitError Closure called when device verification limit error occurs
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestUserDeviceVerificationOnSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onVerificationRequestLimitError:(void (^ _Nonnull)(BIIDCRVerificationRequestLimitError * _Nonnull))onVerificationRequestLimitError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Verify the current device
/// \param code verification code
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onValidationError Closure called when a parameters fails validation
///
/// \param onVerificationCodeExpiredError Closure called when the verification code has expired and the user has to request a verification code again
///
/// \param onVerificationCodeAttemptsError Closure called when the user has been locked after entering a verfication code too many times
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)verifyUserDeviceWithVericationCode:(NSString * _Nonnull)code onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onVerificationCodeExpiredError:(void (^ _Nonnull)(BIIDCRVerificationCodeExpiredError * _Nonnull))onVerificationCodeExpiredError onVerificationCodeAttemptsError:(void (^ _Nonnull)(BIIDCRVerificationCodeAttemptsError * _Nonnull))onVerificationCodeAttemptsError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Certifies the user at accreditation Level 1
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)certifyUserAtLevel1OnSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Certifies the user at accreditation Level 2 or Level 3
/// \param diac Digital Identity Access Code the user received by different channel
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onValidationError Closure called when a parameters fails validation
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)certifyUserWithDIAC:(NSString * _Nonnull)diac onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Certifies the user at accreditation Level 4
/// \param diac Digital Identity Access Code the user received by different channel
///
/// \param password Password used to access the Level 4 Certificate in the HSM
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onValidationError Closure called when a parameters fails validation
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onCredentialsError Closure called when the password is incorrect for L4 certification
///
/// \param onClientError Closure called when a client error occurs
///
- (void)certifyUserWithDIAC:(NSString * _Nonnull)diac password:(NSString * _Nullable)password onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onCredentialsError:(void (^ _Nonnull)(BIIDCRCredentialsError * _Nonnull))onCredentialsError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Uncertifies the user for the current Entity
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)uncertifyUserOnSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Return Transactions for current user
/// \param max Maximum results to return - Optional (Defaults to 10)
///
/// \param offset Results offset - Optional (Defaults to 0)
///
/// \param transactionStatus Only returns transactions with these Statuses - Optional (Defaults to all)
///
/// \param transactionType Only returns transactions of this type - Optional (Defaults to all)
///
/// \param documentType Only returns transactions with documents of this type - Optional (Defaults to all)
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestUserTransactionsWithMax:(NSInteger)max offset:(NSInteger)offset transactionStatus:(NSArray<NSNumber *> * _Nonnull)transactionStatus transactionType:(enum BIIDCRTransactionType)transactionType documentType:(enum BIIDCRDocumentType)documentType onSuccess:(void (^ _Nonnull)(NSArray<BIIDCRTransaction *> * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Extends Permissions allows a certified user to see their transactions on a secondary device without having to have certified on that device itself
/// \param diac Digital Identity Access Code the user received by a different channel
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onValidationError Closure called when a parameters fails validation
///
/// \param onDIACLimitError Closure called when an incorrect DIAC is entered too many times
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestExtendPermissionsWithDIAC:(NSString * _Nonnull)diac onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onDIACLimitError:(void (^ _Nonnull)(BIIDCRDIACLimitError * _Nonnull))onDIACLimitError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Creates an authentication transaction for the currently selected entity
/// \param transactionInfo Transaction Info
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)createAuthenticationTransactionWithTransactionInfo:(BIIDCRTransactionInfo * _Nonnull)transactionInfo disableNotification:(BOOL)disableNotification onSuccess:(void (^ _Nonnull)(BIIDCRAuthenticationTransaction * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Requests an authentication transaction for the selected entity
/// \param transactionID Transaction ID of transaction to return
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestAuthenticationTransactionWithID:(NSString * _Nonnull)transactionID onSuccess:(void (^ _Nonnull)(BIIDCRAuthenticationTransaction * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Confirms an authentication transaction for the selected entity
/// \param transaction Authentication Transaction
///
/// \param location User’s location or nil
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onTransactionNotPendingError Closure called when the requested transaction is not pending
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)confirmAuthenticationForTransaction:(BIIDCRAuthenticationTransaction * _Nonnull)transaction withLocation:(CLLocation * _Nullable)location onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onTransactionNotPendingError:(void (^ _Nonnull)(BIIDCRTransactionNotPendingError * _Nonnull))onTransactionNotPendingError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Reject an authentication transaction for the selected entity
/// \param transactionID Transaction ID
///
/// \param location User’s location or nil
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onTransactionNotPendingError Closure called when the requested transaction is not pending
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)rejectAuthenticationWithID:(NSString * _Nonnull)transactionID withLocation:(CLLocation * _Nullable)location onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onTransactionNotPendingError:(void (^ _Nonnull)(BIIDCRTransactionNotPendingError * _Nonnull))onTransactionNotPendingError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Requests a documents transaction for the selected entity
/// \param transactionID Transaction ID of transaction to return
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestDocumentsTransactionWithID:(NSString * _Nonnull)transactionID onSuccess:(void (^ _Nonnull)(BIIDCRDocumentsTransaction * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Requests a document for the selected entity
/// \param documentID Document ID
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestDocumentForDocumentID:(NSString * _Nonnull)documentID onSuccess:(void (^ _Nonnull)(BIIDCRDocument * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Requests the content of a document
/// \param document Document for which to return content
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestDocumentContentForDocument:(BIIDCRDocument * _Nonnull)document onSuccess:(void (^ _Nonnull)(NSURL * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Requests a preview of a document
/// \param document Document for which to return content
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestDocumentPreviewForDocument:(BIIDCRDocument * _Nonnull)document onSuccess:(void (^ _Nonnull)(NSURL * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Download a publicly accessible document (hosted on the biid platform)
/// \param document Filename of the publicly accessible document to download
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onClientError Closure called when a client error occurs
///
- (void)downloadPublicDocumentNamed:(NSString * _Nonnull)document onSuccess:(void (^ _Nonnull)(NSURL * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Sign documents in a transaction
/// \param transaction Documents Transaction
///
/// \param location User’s location or nil
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onTransactionNotPendingError Closure called when the requested transaction is not pending
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)signDocuments:(BIIDCRDocumentsTransaction * _Nonnull)transaction withLocation:(CLLocation * _Nullable)location onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onTransactionNotPendingError:(void (^ _Nonnull)(BIIDCRTransactionNotPendingError * _Nonnull))onTransactionNotPendingError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Sign documents in a transaction (for Level 4 certified users)
/// \param transaction Documents Transaction
///
/// \param password Password used to access the Level 4 Certificate in the HSM
///
/// \param location User’s location or nil
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onTransactionNotPendingError Closure called when the requested transaction is not pending
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onCredentialsError Closure called when the password is incorrect for L4 certification
///
/// \param onClientError Closure called when a client error occurs
///
- (void)signDocuments:(BIIDCRDocumentsTransaction * _Nonnull)transaction password:(NSString * _Nullable)password location:(CLLocation * _Nullable)location onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onTransactionNotPendingError:(void (^ _Nonnull)(BIIDCRTransactionNotPendingError * _Nonnull))onTransactionNotPendingError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onCredentialsError:(void (^ _Nonnull)(BIIDCRCredentialsError * _Nonnull))onCredentialsError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Rejects the documents in a transaction for the selected entity
/// \param transactionID Transaction ID
///
/// \param location User’s location or nil
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onTransactionNotPendingError Closure called when the requested transaction is not pending
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)rejectDocuments:(NSString * _Nonnull)transactionID withLocation:(CLLocation * _Nullable)location onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onTransactionNotPendingError:(void (^ _Nonnull)(BIIDCRTransactionNotPendingError * _Nonnull))onTransactionNotPendingError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Requests a Message transaction for the selected entity
/// \param transactionID Transaction ID of transaction to return
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestMessageTransactionWithID:(NSString * _Nonnull)transactionID onSuccess:(void (^ _Nonnull)(BIIDCRMessageTransaction * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Dismiss a Message transaction for the selected entity
/// \param transaction Message Transaction
///
/// \param location User’s location or nil
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidUserStateError Closure called if the user is in an incorrect state to call this method
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onTransactionNotPendingError Closure called when the requested transaction is not pending
///
/// \param onUserLockedError Closure called when the user is locked
///
/// \param onClientError Closure called when a client error occurs
///
- (void)dismissMessageForTransaction:(BIIDCRMessageTransaction * _Nonnull)transaction withLocation:(CLLocation * _Nullable)location onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onTransactionNotPendingError:(void (^ _Nonnull)(BIIDCRTransactionNotPendingError * _Nonnull))onTransactionNotPendingError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Sets the Localized reason to be displayed in the authentication dialog. Only available with iOS 11 and above
/// \param reason Localised reason string to be shown in the presented dialog
///
- (void)forceAuthenticationOnNextKeyAccessWithReason:(NSString * _Nonnull)reason;
/// Sets the Localized reason to be displayed in the authentication dialog. Only available with iOS 11 and above
/// \param reason Localised reason string to be shown in the presented dialog
///
- (void)setAuthenticationReasonTo:(NSString * _Nonnull)reason SWIFT_AVAILABILITY(ios,introduced=11.0);
/// Registers a device for Push Notifications NB if a user is not authenticated at the time this API is called, the device token is stored and used to register once a user is authenticated
/// \param deviceToken Device Token
///
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onClientError Closure called when a client error occurs
///
- (void)registerUserDeviceWithDeviceToken:(NSData * _Nonnull)deviceToken onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Unregisters a device for Push Notifications
/// \param onSuccess Closure called on a successful response
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onClientError Closure called when a client error occurs
///
- (void)unregisterUserDeviceOnSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Creates and returns a biidNotification object from the userInfo payload of a Push notification
/// \param userInfo UserInfo received with the Push Notification
///
/// \param onSuccess Closure if a BiidNotification has been successfully created
///
/// \param onClientError Closure called when a client error occurs
///
- (void)onPushNotificationReceivedUserInfo:(NSDictionary * _Nonnull)userInfo onSuccess:(void (^ _Nonnull)(BIIDCRNotification * _Nullable))onSuccess onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Returns SDK Version number
- (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
- (void)requestOnboardingProcessOnSuccess:(void (^ _Nonnull)(BIIDCROnboardingProcess * _Nullable))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onInvalidUserState:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserState onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Returns  evidence related to a transaction
/// \param transactionID Transaction ID
///
/// \param onSuccess Closure if the evidence is successfully returned
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onInvalidUserState Closure called if the user is in an incorrect state to call this method
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestEvidenceForTransactionID:(NSString * _Nonnull)transactionID onSuccess:(void (^ _Nonnull)(BIIDCREvidence * _Nullable))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onInvalidUserState:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserState onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Returns  evidence related to a transaction document
/// \param transactionID Transaction ID
///
/// \param documentID Document ID
///
/// \param onSuccess Closure if the evidence is successfully returned
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onInvalidUserState Closure called if the user is in an incorrect state to call this method
///
/// \param onClientError Closure called when a client error occurs
///
- (void)requestDocumentEvidenceForTransactionID:(NSString * _Nonnull)transactionID withDocumentID:(NSString * _Nonnull)documentID onSuccess:(void (^ _Nonnull)(BIIDCREvidence * _Nullable))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onInvalidUserState:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserState onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Returns the customization configuration for the given app
/// \param onSuccess Closure if the evidence is successfully returned
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onInvalidUserState Closure called if the user is in an incorrect state to call this method
///
/// \param onClientError Closure called when a client error occurs
///
- (void)getCustomizationConfigOnSucces:(void (^ _Nonnull)(NSString * _Nullable))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onInvalidUserState:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserState onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Returns the menu configuration for the given app
/// \param onSuccess Closure if the evidence is successfully returned
///
/// \param onNoConnection Closure called when a connection issue occurs
///
/// \param onInvalidToken Closure called when an invalid token is used
///
/// \param onInvalidUserState Closure called if the user is in an incorrect state to call this method
///
/// \param onClientError Closure called when a client error occurs
///
- (void)getMenuConfigOnSucces:(void (^ _Nonnull)(NSString * _Nullable))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onInvalidUserState:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserState onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
/// Migrate between versions
/// \param onSuccess Closure if the evidence is successfully returned
///
/// \param onClientError Closure called when a client error occurs
///
- (void)migrateOnSucces:(void (^ _Nonnull)(void))onSuccess onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
@end


SWIFT_CLASS_NAMED("ObjC_ClientError")
@interface BIIDCRClientError : BIIDCRBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clientErrorDomain;)
+ (NSString * _Nonnull)clientErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull certificateExceptionErrorDomain;)
+ (NSString * _Nonnull)certificateExceptionErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull jweExceptionErrorDomain;)
+ (NSString * _Nonnull)jweExceptionErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull asymmetricCryptoExceptionErrorDomain;)
+ (NSString * _Nonnull)asymmetricCryptoExceptionErrorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCRClientException, "ObjC_ClientException", closed) {
  BIIDCRClientExceptionAppAndManifestBundleIDsDoNotMatch = 100,
  BIIDCRClientExceptionBiidNotificationCouldNotBeCreated = 101,
  BIIDCRClientExceptionCertifyRequestFailed = 102,
  BIIDCRClientExceptionClientNotSupported = 103,
  BIIDCRClientExceptionCsrCouldNotBeSent = 104,
  BIIDCRClientExceptionCsrGenerationFailed = 105,
  BIIDCRClientExceptionDeviceAlreadyVerified = 106,
  BIIDCRClientExceptionDeviceWithSecureEnclaveRequired = 107,
  BIIDCRClientExceptionDiacCouldNotBeEncrypted = 108,
  BIIDCRClientExceptionEntityConfigCouldNotBeLoaded = 109,
  BIIDCRClientExceptionFailedOAuthRequest = 110,
  BIIDCRClientExceptionFailedToCheckEntityExists = 111,
  BIIDCRClientExceptionFailedToConfirmAuthenticationTransaction = 112,
  BIIDCRClientExceptionFailedToCreateAuthenticationTransaction = 113,
  BIIDCRClientExceptionFailedToExtendPermissions = 114,
  BIIDCRClientExceptionFailedToGetAuthenticationTransaction = 115,
  BIIDCRClientExceptionFailedToGetCertificate = 116,
  BIIDCRClientExceptionFailedToGetCheckpoints = 117,
  BIIDCRClientExceptionFailedToGetCheckpointDetails = 118,
  BIIDCRClientExceptionFailedToGetCountries = 119,
  BIIDCRClientExceptionFailedToGetDocumentIdTypes = 120,
  BIIDCRClientExceptionFailedToGetCSRAttributes = 121,
  BIIDCRClientExceptionFailedToGetDIAC = 122,
  BIIDCRClientExceptionFailedToGetDocument = 123,
  BIIDCRClientExceptionFailedToGetDocumentContent = 124,
  BIIDCRClientExceptionFailedToGetDocumentID = 125,
  BIIDCRClientExceptionFailedToGetDocumentPreview = 126,
  BIIDCRClientExceptionFailedToGetDocumentsTransaction = 127,
  BIIDCRClientExceptionFailedToGetEntities = 128,
  BIIDCRClientExceptionFailedToGetEntity = 129,
  BIIDCRClientExceptionFailedToGetMessageTransaction = 130,
  BIIDCRClientExceptionFailedToGetTransactions = 131,
  BIIDCRClientExceptionFailedToGetUser = 132,
  BIIDCRClientExceptionFailedToGetUserDevices = 133,
  BIIDCRClientExceptionFailedToRegisterForPush = 134,
  BIIDCRClientExceptionFailedToRegisterUser = 135,
  BIIDCRClientExceptionFailedToRejectTransaction = 136,
  BIIDCRClientExceptionFailedToRequestDeviceVerification = 137,
  BIIDCRClientExceptionFailedToSaveCertCertInvalid = 138,
  BIIDCRClientExceptionFailedToSignDocuments = 139,
  BIIDCRClientExceptionFailedToUnCertify = 140,
  BIIDCRClientExceptionFailedToSendCSR = 141,
  BIIDCRClientExceptionFailedToSignTransaction = 142,
  BIIDCRClientExceptionFailedToUnRegisterUserDevice = 143,
  BIIDCRClientExceptionFailedToUpdateUser = 144,
  BIIDCRClientExceptionFailedToUpdateUserPhoneNumber = 145,
  BIIDCRClientExceptionFailedToVerifyUserDevice = 146,
  BIIDCRClientExceptionGeneratedDIACInvalid = 147,
  BIIDCRClientExceptionInvalidAuthenticationTransaction = 148,
  BIIDCRClientExceptionInvalidDocumentsTransaction = 149,
  BIIDCRClientExceptionInvalidEndpoint = 150,
  BIIDCRClientExceptionMissingOrInvalidParameter = 151,
  BIIDCRClientExceptionMissingUsernameAndOrEntity = 152,
  BIIDCRClientExceptionMultipleEntitiesNotSupported = 153,
  BIIDCRClientExceptionMustBeCalledOnTheMainThread = 154,
  BIIDCRClientExceptionNoSelectedEntity = 155,
  BIIDCRClientExceptionParameterCanNotBeNegative = 156,
  BIIDCRClientExceptionPublicKeyNotFound = 157,
  BIIDCRClientExceptionReadOnlyField = 158,
  BIIDCRClientExceptionSecureEnclaveUseRequiresMininumOfiOS10 = 159,
  BIIDCRClientExceptionSdkNotInitialized = 160,
  BIIDCRClientExceptionUnexpectedError = 161,
  BIIDCRClientExceptionUnknownError = 162,
  BIIDCRClientExceptionUserNotAuthenticated = 163,
  BIIDCRClientExceptionVerificationCodeNotRequested = 164,
};


SWIFT_CLASS_NAMED("ObjC_ClientImplementation")
@interface BIIDCRClientImplementation : NSObject <Client>
- (nonnull instancetype)init;
- (NSString * _Nullable)getLanguage:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (void)setLanguageToLanguage:(NSString * _Nullable)language onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (BOOL)initialize:(NSError * _Nullable * _Nullable)error;
- (void)authenticateWithUsername:(NSString * _Nonnull)username accessToken:(NSString * _Nonnull)accessToken entity:(BIIDCREntity * _Nullable)entity onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)reauthenticateOnSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (BOOL)logout:(NSError * _Nullable * _Nullable)error;
- (BOOL)setInstallationID:(NSString * _Nonnull)installationID error:(NSError * _Nullable * _Nullable)error;
- (NSString * _Nullable)getInstallationID:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (void)checkEntityExistsWithURLName:(NSString * _Nonnull)urlName onSuccess:(void (^ _Nonnull)(BIIDCREntity * _Nullable))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestEntityWithURLName:(NSString * _Nonnull)urlName onSuccess:(void (^ _Nonnull)(BIIDCREntity * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestEntitiesForUserOnSuccess:(void (^ _Nonnull)(NSArray<BIIDCREntity *> * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)selectEntity:(BIIDCREntity * _Nonnull)entity onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)selectEntityWithEntityID:(NSString * _Nonnull)id onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (BIIDCREntity * _Nullable)getSelectedEntity:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (void)requestCountriesOnSuccess:(void (^ _Nonnull)(NSArray<BIIDCRCountry *> * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestDocumentIdTypesOnSuccess:(void (^ _Nonnull)(NSArray<BIIDCRDocumentIdType *> * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestUserOnSuccess:(void (^ _Nonnull)(BIIDCRUser * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestEntityDetailsOnSuccess:(void (^ _Nonnull)(BIIDCREntityDetails * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestCheckpointsWithMax:(NSInteger)max offset:(NSInteger)offset location:(CLLocation * _Nullable)location sortOrder:(enum BIIDCRCheckpointsSortOrder)sortOrder onSuccess:(void (^ _Nonnull)(NSArray<BIIDCRCheckpoint *> * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestNearestCheckpointsWithMax:(NSInteger)max offset:(NSInteger)offset location:(CLLocation * _Nonnull)location onSuccess:(void (^ _Nonnull)(NSArray<BIIDCRCheckpoint *> * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestCheckpointDetailsWithCheckpointID:(NSString * _Nonnull)checkpointID location:(CLLocation * _Nullable)location onSuccess:(void (^ _Nonnull)(BIIDCRCheckpointDetails * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)registerUser:(BIIDCRUser * _Nonnull)user onSuccess:(void (^ _Nonnull)(BIIDCRUser * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)updateUser:(BIIDCRUser * _Nonnull)user onSuccess:(void (^ _Nonnull)(BIIDCRUser * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onUserUpdateForbiddenErrorCallback:(void (^ _Nonnull)(BIIDCRUserUpdateForbiddenError * _Nonnull))onUserUpdateForbiddenError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)updateUserPhoneNumber:(NSString * _Nonnull)phoneNumber withDiac:(NSString * _Nonnull)diac onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestUserDevicesOnSuccess:(void (^ _Nonnull)(NSArray<BIIDCRUserDevice *> * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestUserDeviceVerificationOnSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onVerificationRequestLimitError:(void (^ _Nonnull)(BIIDCRVerificationRequestLimitError * _Nonnull))onVerificationRequestLimitError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)verifyUserDeviceWithVericationCode:(NSString * _Nonnull)code onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onVerificationCodeExpiredError:(void (^ _Nonnull)(BIIDCRVerificationCodeExpiredError * _Nonnull))onVerificationCodeExpiredError onVerificationCodeAttemptsError:(void (^ _Nonnull)(BIIDCRVerificationCodeAttemptsError * _Nonnull))onVerificationCodeAttemptsError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)certifyUserAtLevel1OnSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)certifyUserWithDIAC:(NSString * _Nonnull)diac onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)certifyUserWithDIAC:(NSString * _Nonnull)diac password:(NSString * _Nullable)password onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onCredentialsError:(void (^ _Nonnull)(BIIDCRCredentialsError * _Nonnull))onCredentialsError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)uncertifyUserOnSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestUserTransactionsWithMax:(NSInteger)max offset:(NSInteger)offset transactionStatus:(NSArray<NSNumber *> * _Nonnull)transactionStatus transactionType:(enum BIIDCRTransactionType)transactionType documentType:(enum BIIDCRDocumentType)documentType onSuccess:(void (^ _Nonnull)(NSArray<BIIDCRTransaction *> * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)createAuthenticationTransactionWithTransactionInfo:(BIIDCRTransactionInfo * _Nonnull)transactionInfo disableNotification:(BOOL)disableNotification onSuccess:(void (^ _Nonnull)(BIIDCRAuthenticationTransaction * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestAuthenticationTransactionWithID:(NSString * _Nonnull)transactionID onSuccess:(void (^ _Nonnull)(BIIDCRAuthenticationTransaction * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)confirmAuthenticationForTransaction:(BIIDCRAuthenticationTransaction * _Nonnull)transaction withLocation:(CLLocation * _Nullable)location onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onTransactionNotPendingError:(void (^ _Nonnull)(BIIDCRTransactionNotPendingError * _Nonnull))onTransactionNotPendingError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)rejectAuthenticationWithID:(NSString * _Nonnull)transactionID withLocation:(CLLocation * _Nullable)location onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onTransactionNotPendingError:(void (^ _Nonnull)(BIIDCRTransactionNotPendingError * _Nonnull))onTransactionNotPendingError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestDocumentsTransactionWithID:(NSString * _Nonnull)transactionID onSuccess:(void (^ _Nonnull)(BIIDCRDocumentsTransaction * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestDocumentForDocumentID:(NSString * _Nonnull)documentID onSuccess:(void (^ _Nonnull)(BIIDCRDocument * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestDocumentContentForDocument:(BIIDCRDocument * _Nonnull)document onSuccess:(void (^ _Nonnull)(NSURL * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)downloadPublicDocumentNamed:(NSString * _Nonnull)document onSuccess:(void (^ _Nonnull)(NSURL * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestDocumentPreviewForDocument:(BIIDCRDocument * _Nonnull)document onSuccess:(void (^ _Nonnull)(NSURL * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)signDocuments:(BIIDCRDocumentsTransaction * _Nonnull)transaction withLocation:(CLLocation * _Nullable)location onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onTransactionNotPendingError:(void (^ _Nonnull)(BIIDCRTransactionNotPendingError * _Nonnull))onTransactionNotPendingError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)signDocuments:(BIIDCRDocumentsTransaction * _Nonnull)transaction password:(NSString * _Nullable)password location:(CLLocation * _Nullable)location onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onTransactionNotPendingError:(void (^ _Nonnull)(BIIDCRTransactionNotPendingError * _Nonnull))onTransactionNotPendingError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onCredentialsError:(void (^ _Nonnull)(BIIDCRCredentialsError * _Nonnull))onCredentialsError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)rejectDocuments:(NSString * _Nonnull)transactionID withLocation:(CLLocation * _Nullable)location onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onTransactionNotPendingError:(void (^ _Nonnull)(BIIDCRTransactionNotPendingError * _Nonnull))onTransactionNotPendingError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestMessageTransactionWithID:(NSString * _Nonnull)transactionID onSuccess:(void (^ _Nonnull)(BIIDCRMessageTransaction * _Nonnull))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)dismissMessageForTransaction:(BIIDCRMessageTransaction * _Nonnull)transaction withLocation:(CLLocation * _Nullable)location onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onTransactionNotPendingError:(void (^ _Nonnull)(BIIDCRTransactionNotPendingError * _Nonnull))onTransactionNotPendingError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)forceAuthenticationOnNextKeyAccessWithReason:(NSString * _Nonnull)reason;
- (void)setAuthenticationReasonTo:(NSString * _Nonnull)reason;
- (void)registerUserDeviceWithDeviceToken:(NSData * _Nonnull)deviceToken onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)unregisterUserDeviceOnSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)onPushNotificationReceivedUserInfo:(NSDictionary * _Nonnull)userInfo onSuccess:(void (^ _Nonnull)(BIIDCRNotification * _Nullable))onSuccess onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestExtendPermissionsWithDIAC:(NSString * _Nonnull)diac onSuccess:(void (^ _Nonnull)(void))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidUserStateError:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserStateError onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onValidationError:(void (^ _Nonnull)(BIIDCRValidationError * _Nonnull))onValidationError onDIACLimitError:(void (^ _Nonnull)(BIIDCRDIACLimitError * _Nonnull))onDIACLimitError onUserLockedError:(void (^ _Nonnull)(BIIDCRUserLockedError * _Nonnull))onUserLockedError onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (NSArray<NSNumber *> * _Nullable)getRoles:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nullable)isMultiEntityConfig:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nullable)isSingleEntityConfig:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
- (void)requestOnboardingProcessOnSuccess:(void (^ _Nonnull)(BIIDCROnboardingProcess * _Nullable))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onInvalidUserState:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserState onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestEvidenceForTransactionID:(NSString * _Nonnull)transactionID onSuccess:(void (^ _Nonnull)(BIIDCREvidence * _Nullable))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onInvalidUserState:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserState onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)requestDocumentEvidenceForTransactionID:(NSString * _Nonnull)transactionID withDocumentID:(NSString * _Nonnull)documentID onSuccess:(void (^ _Nonnull)(BIIDCREvidence * _Nullable))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onInvalidUserState:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserState onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)getCustomizationConfigOnSucces:(void (^ _Nonnull)(NSString * _Nullable))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onInvalidUserState:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserState onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)getMenuConfigOnSucces:(void (^ _Nonnull)(NSString * _Nullable))onSuccess onNoConnection:(void (^ _Nonnull)(void))onNoConnection onInvalidToken:(void (^ _Nonnull)(BIIDCRInvalidTokenError * _Nonnull))onInvalidToken onInvalidUserState:(void (^ _Nonnull)(BIIDCRInvalidUserStateError * _Nonnull))onInvalidUserState onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
- (void)migrateOnSucces:(void (^ _Nonnull)(void))onSuccess onClientError:(void (^ _Nonnull)(BIIDCRClientError * _Nonnull))onClientError;
@end


SWIFT_CLASS_NAMED("ObjC_ContactDetails")
@interface BIIDCRContactDetails : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable website;
@property (nonatomic, readonly, copy) NSString * _Nullable email;
@property (nonatomic, readonly, copy) NSString * _Nullable phone;
@property (nonatomic, readonly, copy) NSString * _Nullable fax;
@property (nonatomic, readonly, copy) NSString * _Nullable facebook;
@property (nonatomic, readonly, copy) NSString * _Nullable twitter;
@property (nonatomic, readonly, copy) NSString * _Nullable instagram;
@property (nonatomic, readonly, copy) NSString * _Nullable pinterest;
@property (nonatomic, readonly, copy) NSString * _Nullable foursquare;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCRContactDetails (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ObjC_Country")
@interface BIIDCRCountry : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable key;
@property (nonatomic, readonly, copy) NSString * _Nullable label;
@property (nonatomic, readonly, copy) NSString * _Nullable phonePrefix;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCRCountry (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ObjC_CredentialsError")
@interface BIIDCRCredentialsError : BIIDCRBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("ObjC_DIACLimitError")
@interface BIIDCRDIACLimitError : BIIDCRBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("ObjC_Device")
@interface BIIDCRDevice : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable os;
@property (nonatomic, readonly, copy) NSString * _Nullable version;
@property (nonatomic, readonly, copy) NSString * _Nullable model;
@property (nonatomic, readonly, copy) NSString * _Nullable SDKVersion;
@property (nonatomic, readonly, copy) NSString * _Nullable language;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCRDevice (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ObjC_Document")
@interface BIIDCRDocument : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly) enum BIIDCRDocumentType type;
@property (nonatomic, readonly, copy) NSString * _Nullable id;
@property (nonatomic, readonly, copy) NSString * _Nullable seId;
@property (nonatomic, readonly, copy) NSString * _Nullable hashToSign;
@property (nonatomic, readonly, copy) NSString * _Nullable publicURL;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCRDocument (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ObjC_DocumentIdType")
@interface BIIDCRDocumentIdType : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable key;
@property (nonatomic, readonly, copy) NSString * _Nullable label;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCRDocumentIdType (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCRDocumentType, "ObjC_DocumentType", closed) {
  BIIDCRDocumentTypeAll = 0,
  BIIDCRDocumentTypePdf = 1,
  BIIDCRDocumentTypeXml = 2,
};


SWIFT_CLASS_NAMED("ObjC_DocumentsTransaction")
@interface BIIDCRDocumentsTransaction : BIIDCRTransaction
@property (nonatomic, readonly, copy) NSArray<BIIDCRDocument *> * _Nullable documents;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


@interface BIIDCRDocumentsTransaction (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

enum BIIDCRUserStatus : NSInteger;

SWIFT_CLASS_NAMED("ObjC_Entity")
@interface BIIDCREntity : NSObject
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nullable id;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable iconURL;
@property (nonatomic, readonly) BOOL selected;
@property (nonatomic, readonly, strong) BIIDCRDocument * _Nullable terms;
@property (nonatomic, readonly, strong) BIIDCRDocument * _Nullable privacy;
@property (nonatomic, readonly, copy) NSString * _Nullable entityDescription;
@property (nonatomic, readonly) enum BIIDCRUserStatus userStatus;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCREntity (SWIFT_EXTENSION(biidCoreSDK))
/// Returns a URL to the Privacy document for the entity
- (NSString * _Nullable)getPrivacyURL SWIFT_WARN_UNUSED_RESULT;
/// Returns a URL to the Terms & Conditions document for the entity
- (NSString * _Nullable)getTermsURL SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class BIIDCRFieldDefinition;

SWIFT_CLASS_NAMED("ObjC_EntityDetails")
@interface BIIDCREntityDetails : BIIDCREntity
@property (nonatomic, readonly, copy) NSArray<BIIDCRFieldDefinition *> * _Nullable userFieldDefinitions;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id SWIFT_UNAVAILABLE;
@end


@interface BIIDCREntityDetails (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class BIIDCREvidenceInfo;

SWIFT_CLASS_NAMED("ObjC_Evidence")
@interface BIIDCREvidence : NSObject
@property (nonatomic, readonly, strong) BIIDCREvidenceInfo * _Nullable info;
@property (nonatomic, readonly, copy) NSString * _Nullable id;
@property (nonatomic, readonly, copy) NSString * _Nullable originalFile;
@property (nonatomic, readonly, copy) NSString * _Nullable signedFile;
@property (nonatomic, readonly, copy) NSString * _Nullable receiptFile;
@property (nonatomic, readonly, copy) NSString * _Nullable dateCreated;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCREvidence (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ObjC_EvidenceInfo")
@interface BIIDCREvidenceInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable commonName;
@property (nonatomic, readonly, copy) NSString * _Nullable orgUnit;
@property (nonatomic, readonly, copy) NSString * _Nullable organization;
@property (nonatomic, readonly, copy) NSString * _Nullable locality;
@property (nonatomic, readonly, copy) NSString * _Nullable state;
@property (nonatomic, readonly, copy) NSString * _Nullable countryCode;
@property (nonatomic, readonly, copy) NSString * _Nullable email;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCREvidenceInfo (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

enum BIIDCRFieldDefinitionInputType : NSInteger;
@class BIIDCROptionValue;

SWIFT_CLASS_NAMED("ObjC_FieldDefinition")
@interface BIIDCRFieldDefinition : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly) BOOL required;
@property (nonatomic, readonly, copy) NSString * _Nullable label;
@property (nonatomic, readonly, copy) NSString * _Nullable hint;
@property (nonatomic, readonly) enum BIIDCRFieldDefinitionInputType inputType;
@property (nonatomic, readonly) BOOL readOnly;
@property (nonatomic, readonly) BOOL secured;
@property (nonatomic, readonly, copy) NSArray<BIIDCROptionValue *> * _Nullable options;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCRFieldDefinition (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCRFieldDefinitionInputType, "ObjC_FieldDefinitionInputType", closed) {
  BIIDCRFieldDefinitionInputTypeNone = 0,
  BIIDCRFieldDefinitionInputTypeText = 1,
  BIIDCRFieldDefinitionInputTypeEmailAddress = 2,
  BIIDCRFieldDefinitionInputTypePhoneNumber = 3,
  BIIDCRFieldDefinitionInputTypeSelection = 4,
  BIIDCRFieldDefinitionInputTypeCountryCode = 5,
  BIIDCRFieldDefinitionInputTypeNumeric = 6,
  BIIDCRFieldDefinitionInputTypeDate = 7,
  BIIDCRFieldDefinitionInputTypeBoolean = 8,
  BIIDCRFieldDefinitionInputTypeDocumentType = 9,
};

@class NSDate;

SWIFT_CLASS_NAMED("ObjC_Holiday")
@interface BIIDCRHoliday : NSObject
@property (nonatomic, readonly, copy) NSDate * _Nullable from;
@property (nonatomic, readonly, copy) NSDate * _Nullable to;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCRHoliday (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCRInvalidState, "ObjC_InvalidState", closed) {
  BIIDCRInvalidStateNotVerified = 2500,
  BIIDCRInvalidStateNotRegistered = 2501,
  BIIDCRInvalidStateAlreadyRegistered = 2502,
  BIIDCRInvalidStateNotAccredited = 2503,
  BIIDCRInvalidStateNotCertified = 2504,
  BIIDCRInvalidStateUserDeviceAlreadyVerified = 2505,
};

enum BIIDCRInvalidTokenErrorCode : NSInteger;

SWIFT_CLASS_NAMED("ObjC_InvalidTokenError")
@interface BIIDCRInvalidTokenError : BIIDCRBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) enum BIIDCRInvalidTokenErrorCode action;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCRInvalidTokenErrorCode, "ObjC_InvalidTokenResolution", closed) {
  BIIDCRInvalidTokenErrorCodeLogin = 1500,
  BIIDCRInvalidTokenErrorCodeRetry = 1501,
};


SWIFT_CLASS_NAMED("ObjC_InvalidUserStateError")
@interface BIIDCRInvalidUserStateError : BIIDCRBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) enum BIIDCRInvalidState invalidState;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCRJWEException, "ObjC_JWEException", closed) {
  BIIDCRJWEExceptionAppKeyMissing = 200,
  BIIDCRJWEExceptionJwtCouldNotBeCreated = 201,
  BIIDCRJWEExceptionPublicKeyCouldNotBeCreatedFromPEM = 202,
  BIIDCRJWEExceptionPublicKeyMissing = 203,
  BIIDCRJWEExceptionSerializationFailed = 204,
  BIIDCRJWEExceptionUnspecifiedError = 205,
};


SWIFT_CLASS_NAMED("ObjC_Location")
@interface BIIDCRLocation : NSObject
- (nonnull instancetype)initWithLatitude:(double)latitude longitude:(double)longitude OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) double latitude;
@property (nonatomic, readonly) double longitude;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCRLocation (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ObjC_MessageTransaction")
@interface BIIDCRMessageTransaction : BIIDCRAuthenticationTransaction
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCRNotificationType, "ObjC_NotificationType", closed) {
  BIIDCRNotificationTypeAuth = 0,
  BIIDCRNotificationTypeAuthWEB = 1,
  BIIDCRNotificationTypeAuthIDV = 2,
  BIIDCRNotificationTypeDoc = 3,
  BIIDCRNotificationTypeDocPDF = 4,
  BIIDCRNotificationTypeDocXML = 5,
  BIIDCRNotificationTypeDocMIXED = 6,
  BIIDCRNotificationTypeMsg = 7,
  BIIDCRNotificationTypeCert = 8,
  BIIDCRNotificationTypeCertError = 9,
};


SWIFT_CLASS_NAMED("ObjC_OnboardingData")
@interface BIIDCROnboardingData : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable additionalProperties;
- (NSString * _Nullable)objectForKeyedSubscript:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)setObject:(NSString * _Nullable)newValue forKeyedSubscript:(NSString * _Nonnull)key;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum BIIDCROnboardingProvider : NSInteger;
enum BIIDCROnboardingStatus : NSInteger;

SWIFT_CLASS_NAMED("ObjC_OnboardingProcess")
@interface BIIDCROnboardingProcess : NSObject
@property (nonatomic, readonly, strong) BIIDCROnboardingData * _Nullable onboardingData;
@property (nonatomic, readonly) double id;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly) double entityId;
@property (nonatomic, readonly) enum BIIDCROnboardingProvider onboardingProvider;
@property (nonatomic, readonly, copy) NSString * _Nonnull externalId;
@property (nonatomic, readonly) enum BIIDCROnboardingStatus onboardingStatus;
/// Date created
@property (nonatomic, readonly, copy) NSString * _Nonnull dateCreated;
/// Last Updated
@property (nonatomic, readonly, copy) NSString * _Nonnull lastUpdated;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCROnboardingProvider, "ObjC_OnboardingProvider", closed) {
  BIIDCROnboardingProviderUnknown = 0,
  BIIDCROnboardingProviderOndato = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCROnboardingStatus, "ObjC_OnboardingStatus", closed) {
  BIIDCROnboardingStatusUnknown = 0,
  BIIDCROnboardingStatusStarted = 1,
  BIIDCROnboardingStatusOnprocess = 2,
  BIIDCROnboardingStatusAccepted = 3,
  BIIDCROnboardingStatusRejected = 4,
  BIIDCROnboardingStatusCancelled = 5,
};


SWIFT_CLASS_NAMED("ObjC_OpeningHours")
@interface BIIDCROpeningHours : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable from;
@property (nonatomic, readonly, copy) NSString * _Nullable to;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCROpeningHours (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ObjC_OpeningHoursDay")
@interface BIIDCROpeningHoursDay : NSObject
@property (nonatomic, readonly) NSInteger dayOfWeek;
@property (nonatomic, readonly) BOOL open24Hours;
@property (nonatomic, readonly, copy) NSArray<BIIDCROpeningHours *> * _Nullable openingHours;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCROpeningHoursDay (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ObjC_OpeningHoursSchedule")
@interface BIIDCROpeningHoursSchedule : NSObject
@property (nonatomic, readonly, copy) NSDate * _Nullable from;
@property (nonatomic, readonly, copy) NSDate * _Nullable to;
@property (nonatomic, readonly, copy) NSArray<BIIDCROpeningHoursDay *> * _Nullable days;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCROpeningHoursSchedule (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCROpeningHoursStatus, "ObjC_OpeningHoursStatus", closed) {
  BIIDCROpeningHoursStatusOpen = 0,
  BIIDCROpeningHoursStatusClosed = 1,
  BIIDCROpeningHoursStatusUnknown = 2,
};


SWIFT_CLASS_NAMED("ObjC_OptionValue")
@interface BIIDCROptionValue : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable key;
@property (nonatomic, readonly, copy) NSString * _Nullable label;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (NSString * _Nullable)objectForKeyedSubscript:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)setObject:(NSString * _Nullable)newValue forKeyedSubscript:(NSString * _Nonnull)key;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCROptionValue (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

/// :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, Role, "ObjC_Role", closed) {
  RoleGuest = 0,
  RoleUser = 1,
  RoleUserCertified = 2,
  RoleUserExtended = 3,
  RoleUserLocked = 4,
};


SWIFT_CLASS_NAMED("ObjC_SDK")
@interface BiidCoreSDK : NSObject
+ (id <Client> _Nonnull)getClient SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BIIDCRSignatoryUser;
@class BIIDCRSignatoryDevice;

SWIFT_CLASS_NAMED("ObjC_Signatory")
@interface BIIDCRSignatory : NSObject
@property (nonatomic, strong) BIIDCRSignatoryUser * _Nullable user;
@property (nonatomic, strong) BIIDCRSignatoryDevice * _Nullable device;
@property (nonatomic, strong) BIIDCRLocation * _Nullable location;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCRSignatory (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ObjC_SignatoryDevice")
@interface BIIDCRSignatoryDevice : BIIDCRDevice
@property (nonatomic, readonly, copy) NSString * _Nullable id;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


@interface BIIDCRSignatoryDevice (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ObjC_SignatoryUser")
@interface BIIDCRSignatoryUser : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable username;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BIIDCRSignatoryUser (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end



@interface BIIDCRTransaction (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ObjC_TransactionInfo")
@interface BIIDCRTransactionInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kTitle;)
+ (NSString * _Nonnull)kTitle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDescription;)
+ (NSString * _Nonnull)kDescription SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kLocation;)
+ (NSString * _Nonnull)kLocation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, copy) NSString * _Nullable transactionDescription;
@property (nonatomic, strong) BIIDCRLocation * _Nullable location;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull additionalProperties;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (id _Nullable)objectForKeyedSubscript:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)setObject:(id _Nullable)newValue forKeyedSubscript:(NSString * _Nonnull)key;
@end


@interface BIIDCRTransactionInfo (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ObjC_TransactionNotPendingError")
@interface BIIDCRTransactionNotPendingError : BIIDCRBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCRTransactionStatus, "ObjC_TransactionStatus", closed) {
  BIIDCRTransactionStatusAll = 0,
  BIIDCRTransactionStatusPending = 1,
  BIIDCRTransactionStatusExpired = 2,
  BIIDCRTransactionStatusFailed = 3,
  BIIDCRTransactionStatusCancelled = 4,
  BIIDCRTransactionStatusRejected = 5,
  BIIDCRTransactionStatusSuccessful = 6,
};

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCRTransactionSubType, "ObjC_TransactionSubType", closed) {
  BIIDCRTransactionSubTypeDocPDF = 0,
  BIIDCRTransactionSubTypeDocXML = 1,
  BIIDCRTransactionSubTypeDocMIXED = 2,
  BIIDCRTransactionSubTypeAuthWEB = 3,
  BIIDCRTransactionSubTypeAuthIDV = 4,
  BIIDCRTransactionSubTypeNone = 5,
};

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCRTransactionType, "ObjC_TransactionType", closed) {
  BIIDCRTransactionTypeAll = 0,
  BIIDCRTransactionTypeAuth = 1,
  BIIDCRTransactionTypeDoc = 2,
  BIIDCRTransactionTypeMsg = 3,
};


SWIFT_CLASS_NAMED("ObjC_User")
@interface BIIDCRUser : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUsername;)
+ (NSString * _Nonnull)kUsername SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kPhoneNumber;)
+ (NSString * _Nonnull)kPhoneNumber SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kStatus;)
+ (NSString * _Nonnull)kStatus SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAccreditationLevel;)
+ (NSString * _Nonnull)kAccreditationLevel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) enum BIIDCRUserStatus status;
@property (nonatomic, readonly, copy) NSString * _Nullable username;
@property (nonatomic, readonly) enum BIIDCRAccreditationLevel accreditationLevel;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull additionalProperties;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (id _Nullable)objectForKeyedSubscript:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)setObject:(id _Nullable)newValue forKeyedSubscript:(NSString * _Nonnull)key;
@end


@interface BIIDCRUser (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ObjC_UserAlreadyRegisteredError")
@interface BIIDCRUserAlreadyRegisteredError : BIIDCRInvalidUserStateError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("ObjC_UserDevice")
@interface BIIDCRUserDevice : BIIDCRDevice
@property (nonatomic, readonly, copy) NSString * _Nullable lastUsed;
@property (nonatomic, readonly) BOOL currentDevice;
@property (nonatomic, readonly) enum BIIDCRUserStatus userStatus;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


@interface BIIDCRUserDevice (SWIFT_EXTENSION(biidCoreSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ObjC_UserDeviceAlreadyVerifiedError")
@interface BIIDCRUserDeviceAlreadyVerifiedError : BIIDCRInvalidUserStateError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("ObjC_UserDeviceNotVerifiedError")
@interface BIIDCRUserDeviceNotVerifiedError : BIIDCRInvalidUserStateError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("ObjC_UserLockedError")
@interface BIIDCRUserLockedError : BIIDCRBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("ObjC_UserNotAccreditedError")
@interface BIIDCRUserNotAccreditedError : BIIDCRInvalidUserStateError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("ObjC_UserNotCertifiedError")
@interface BIIDCRUserNotCertifiedError : BIIDCRInvalidUserStateError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("ObjC_UserNotRegisteredError")
@interface BIIDCRUserNotRegisteredError : BIIDCRInvalidUserStateError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BIIDCRUserStatus, "ObjC_UserStatus", closed) {
  BIIDCRUserStatusUnverified = 0,
  BIIDCRUserStatusUnregistered = 1,
  BIIDCRUserStatusUnaccredited = 2,
  BIIDCRUserStatusUncertified = 3,
  BIIDCRUserStatusCertificatePending = 4,
  BIIDCRUserStatusCertified = 5,
  BIIDCRUserStatusLocked = 6,
  BIIDCRUserStatusUnknown = 7,
};


SWIFT_CLASS_NAMED("ObjC_UserUpdateForbiddenError")
@interface BIIDCRUserUpdateForbiddenError : BIIDCRBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("ObjC_ValidationError")
@interface BIIDCRValidationError : BIIDCRBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("ObjC_VerificationCodeAttemptsError")
@interface BIIDCRVerificationCodeAttemptsError : BIIDCRBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("ObjC_VerificationCodeExpiredError")
@interface BIIDCRVerificationCodeExpiredError : BIIDCRBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("ObjC_VerificationRequestLimitError")
@interface BIIDCRVerificationRequestLimitError : BIIDCRBiidError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithTraceId:(NSString * _Nullable)traceId domain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_UNAVAILABLE;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
#endif
